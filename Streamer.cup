import java_cup.runtime.*;

/* This code redefines a syntax error to give a more useful message
..... */
parser code
{:
public void syntax_error(Symbol lastToken) {
    System.err.println("Syntax error at  " +
                       "Line: " + lastToken.left + "   " +
                       "Column: " + lastToken.right);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    done_parsing();
    System.exit(1);
}
:};

/* Terminals (tokens returned by the scanner). */
/* This is what generates sym.java! */
terminal ЕНДЛ, РАВНО, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal И,ИЛИ, НЕТ, EQUALS, LT, GT, LEQ, GEQ;
terminal ОТКУДРЯВЫЙ, CLOSECURLY;
terminal ОТСКОБКА, CLOSEPAREN;
terminal OPENSQBRACE, CLOSESQBRACE;
terminal ПОЛОСРАСКОЛ, COLON, READFILE, WRITEFILE, OPENFILTER, CLOSEFILTER;
terminal NUMTYPE, TEXTTYPE, ТЕКСТ, BOOLTYPE, VOIDTYPE, LISTTYPE;
terminal ПРАВДА, ЛОЖЬ;
terminal ВЫХОД, INPUT, EXIT, UNTIL, ERROR, FUNC;
terminal IF, ELSE, FOR, WHILE, BREAK, RETURN;
terminal SWITCH, CASE, DEFAULT;
terminal String ЦЕЛ, ИД, QSTRING;

/* Non terminals */
non terminal ProgramNode program;
non terminal FunctionListNode func_list;
non terminal StatementListNode stmt_list;
non terminal StatementNode stmt;
non terminal ExpressionNode expr;
non terminal TypeNode type;
non terminal ExpressionListNode expr_list;
non terminal ErrorStatementNode er;
non terminal FunkNode funkyboi;
non terminal ParamNode p;
non terminal ParamListNode pl;
non terminal CaseListNode cl;
non terminal DefaultCaseNode dc;
non terminal CaseNode case;

/* Precedences */
precedence right РАВНО;
precedence left EQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left ИЛИ;
precedence left И;
precedence right НЕТ;

/* The grammar rules */
program ::= func_list:f stmt_list:s
    {:
        System.err.println("Program parsed!");
        RESULT = new ProgramNode(f, s);
    :}
;

funkyboi  ::= FUNC type:t ИД:и  ОТСКОБКА pl:p CLOSEPAREN ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
{:
         System.err.println("Funk parsed!");
	RESULT = new FunkNode(t,и,p,s);
:}
;
func_list ::= /* epsilson: TODO! */
    {:
        System.err.println("Function list parsed!");
        RESULT = new FunctionListNode();
    :}
	| funkyboi:f func_list:f2
{:
	f2.addFunk(f,0);
	RESULT=f2;
:}

;

stmt_list ::= stmt:s stmt_list:l
    {:
        System.err.println("Statement list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        l.addStatement(s, 0);
        RESULT = l;
    :}
            | /* epsilon */
    {:
        System.err.println("Empty statement list parsed!");
        RESULT = new StatementListNode();
    :}
;

stmt      ::= expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as expression!");
        RESULT = new ExpressionStatementNode(e);
    :}
            | ВЫХОД expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as print!");
        RESULT = new PrintStatementNode(e);
    :}
            | ИД:и РАВНО  expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as assignment!");
        RESULT = new AssignStatementNode(и, e);
    :}
            | type:t ИД:и РАВНО expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as a declaration assignment!");
        AssignStatementNode assignment = new AssignStatementNode(и, e);
        RESULT = new DeclarationStatementNode(t, и, assignment);
    :}
            | type:t ИД:и ЕНДЛ 
    {:
        System.err.println("Statement parsed as a declaration!");
        RESULT = new DeclarationStatementNode(t, и);
    :}
            | ERROR ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
    {:
        System.err.println("Statement parsed as an error statement!");
        RESULT = new ErrorStatementNode(s);
    :}
            | type:t ИД:и READFILE expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as a declaration read!");
        ReadStatementNode assignment = new ReadStatementNode(и, e);
        RESULT = new DeclarationStatementNode(t, и, assignment);
:}
            | EXIT expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as Exit!"); 
        RESULT = new ExitStatementNode(e);
:}
            | RETURN expr:e ЕНДЛ 
    {:
        System.err.println("Statement parsed as Return!");
        RESULT = new ReturnStatementNode(e);
:}
            | UNTIL type:t ИД:и READFILE expr:e ЕНДЛ  ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
    {:
        System.err.println("Statement parsed as until!");
        ReadStatementNode assignment = new ReadStatementNode(и, e);
        DeclarationStatementNode ds = new DeclarationStatementNode(t, и, assignment);
	RESULT = new UntilStatementNode(ds, s);
:}
            | UNTIL type:t ИД:и РАВНО expr:e ЕНДЛ ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
    {:
        System.err.println("Statement parsed as until!");
        AssignStatementNode assignment = new AssignStatementNode(и, e);
        DeclarationStatementNode ds = new DeclarationStatementNode(t, и, assignment);
	RESULT = new UntilStatementNode(ds, s);
:}
            | expr:e WRITEFILE expr:e2 ЕНДЛ 
    {:
        System.err.println("Statement parsed as a File write!");
        RESULT = new FileWriteNode(e,e2);
:}
            | IF ОТСКОБКА expr:e CLOSEPAREN ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
    {:
        System.err.println("Statement parsed as if!");
        RESULT = new IfStateNode(e,s);
:}
            | IF ОТСКОБКА expr:e CLOSEPAREN ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY ELSE ОТКУДРЯВЫЙ stmt_list:s2 CLOSECURLY
    {:
        System.err.println("Statement parsed as if!");
        RESULT = new IfStateNode(e,s,s2);
:}
            | FOR ОТСКОБКА  type:t ИД:и COLON  ИД:и2 CLOSEPAREN ОТКУДРЯВЫЙ stmt_list:s CLOSECURLY
    {:
        System.err.println("Statement parsed as for!");
        RESULT = new ForStateNode(t, и, new IdExpressionNode(и2), s);
:}
            | SWITCH ОТСКОБКА expr:e CLOSEPAREN ОТКУДРЯВЫЙ cl:cas dc:d CLOSECURLY
    {:
        System.err.println("Statement parsed as switch!");
	cas.addDefault(d);
        RESULT = new CaseStateNode(e, cas);
:}
;

expr      ::= expr:e1 PLUS expr:e2
    {:
        System.err.println("Expression parsed as plus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "+");
    :}
            | expr:e1 MINUS expr:e2
    {:
        System.err.println("Expression parsed as minus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "-");
    :}
            | expr:e1 И expr:e2
    {:
        System.err.println("Expression parsed as and!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "&&");
    :}
            | expr:e1 ИЛИ expr:e2
    {:
        System.err.println("Expression parsed as or!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "||");
    :}
            | ИД:и
    {:
        System.err.println("Expression parsed as ИД!");
        RESULT = new IdExpressionNode(и);
    :}
            | ЦЕЛ:ц
    {:
        System.err.println("Expression parsed as ЦЕЛ!");
        RESULT = new NumExpressionNode(ц);
    :}
            | QSTRING:s
    {:
        System.err.println("Expression parsed as QSTRING!");
        RESULT = new StringExpressionNode(s);
    :}
            | ЛОЖЬ:ложь
    {:
        System.err.println("Expression parsed as ЛОЖЬ!");
        RESULT = new BoolExpressionNode(ложь);
    :}
            | ПРАВДА:правда
    {:
        System.err.println("Expression parsed as ПРАВДА!");
        RESULT = new BoolExpressionNode(правда);
    :}
            | НЕТ expr:e
    {:
        System.err.println("Expression parsed as НЕТ!");
        RESULT = new NotExpressionNode(e);
    :}
            |  ОТКУДРЯВЫЙ expr_list:el CLOSECURLY
    {:
        System.err.println("Expression parsed as list!");
        RESULT = el;
    :}
            | ИД:и ОТСКОБКА  expr_list:el CLOSEPAREN
    {:
        System.err.println("Expression parsed as Funk Kall!");
        RESULT = new FunkKallNode(и,el);
    :}
            | INPUT expr:e
    {:
        System.err.println("Expression parsed as input!");
        RESULT = new InputExpNode(e);
    :}
            | ИД:и OPENSQBRACE expr:e CLOSESQBRACE
    {:
        System.err.println("Expression parsed as list access!");
        RESULT = new ListAcNode(и, e);
    :}
            | expr:e1 TIMES expr:e2
    {:
        System.err.println("Expression parsed as times!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "*");
    :}
            | expr:e1 DIVIDE expr:e2
    {:
        System.err.println("Expression parsed as divide!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "/");
    :}
            | expr:e1 MOD expr:e2
    {:
        System.err.println("Expression parsed as mod!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "%");
    :}
            | ИД:и OPENFILTER expr:e CLOSEFILTER
    {:
        System.err.println("Expression parsed as list filter!");
        RESULT = new ListFiltNode(и,e);
    :}
            | expr:e1 EQUALS expr:e2
    {:
        System.err.println("Expression parsed as mod!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "==");
    :}
;
expr_list ::= expr:e ПОЛОСРАСКОЛ expr_list:el
    {:
        System.err.println("Statement list parsed!");
        el.addExpression(e, 0);
        RESULT = el;
    :}
            | expr:e
    {:
        System.err.println("Expression parsed!");
        RESULT = new ExpressionListNode(e);
    :}
            | /**/
    {:
        System.err.println("Expression parsed!");
        RESULT = new ExpressionListNode();
    :}
;
type      ::= NUMTYPE
    {:
        System.err.println("Type parsed as ЦЕЛ!");
        RESULT = new TypeNode("цел");
    :}
            | ТЕКСТ
    {:
        System.err.println("Type parsed as ТЕКСТ!");
        RESULT = new TypeNode("текст");
    :}
            | BOOLTYPE
    {:
        System.err.println("Type parsed as BOOL!");
        RESULT = new TypeNode("bool");
    :}
            | VOIDTYPE
    {:
        System.err.println("Type parsed as VOID!");
        RESULT = new TypeNode("void");
    :}
            | LISTTYPE LT type:t GT
    {:
        System.err.println("Type parsed as LIST!");
        RESULT = new ListTypeNode(t);
    :}
;
p     ::= type:t ИД:и
{:
	System.err.println("Parameter parsed!");
	RESULT= new ParamNode(t,и);
:}
;
pl ::= p:pa ПОЛОСРАСКОЛ pl:l
    {:
        System.err.println("Parameter list parsed!");
        l.addParam(pa, 0);
        RESULT = l;
    :}
            | p:pa
    {:
        System.err.println("Parameter parsed!");
        RESULT = new ParamListNode(pa);
    :}
            | /**/
    {:
        System.err.println("Expression parsed!");
        RESULT = new ParamListNode();
    :}
;
case    ::= CASE expr:e COLON stmt:s
    {:
        System.err.println("Case parsed!");
        RESULT = new CaseNode(e,s);
    :}
;
dc    ::= DEFAULT COLON stmt:s
    {:
        System.err.println("Default Case parsed!");
        RESULT = new DefaultCaseNode(s);
    :}
;
cl   ::=  case:cas cl:lis
{:
	lis.addCase(cas,0);
	System.err.println("Case added");
	RESULT=lis;
:} 
            | /**/
    {:
        System.err.println("case list parsed!");
        RESULT = new CaseListNode();
    :}
;
