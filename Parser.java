
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\012" +
    "\013\000\002\003\002\000\002\003\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\005\000" +
    "\002\005\006\000\002\005\007\000\002\005\005\000\002" +
    "\005\006\000\002\005\007\000\002\005\005\000\002\005" +
    "\005\000\002\005\013\000\002\005\013\000\002\005\006" +
    "\000\002\005\011\000\002\005\015\000\002\005\014\000" +
    "\002\005\012\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\005\000\002\006\006\000" +
    "\002\006\004\000\002\006\006\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\005\000\002\010\005\000\002\010\003\000\002\010\002" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\006\000\002\013\004\000\002" +
    "\014\005\000\002\014\003\000\002\014\002\000\002\017" +
    "\006\000\002\016\005\000\002\015\004\000\002\015\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\060\002\ufffe\015\ufffe\023\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\005\054\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\001\002" +
    "\000\060\002\ufffe\015\ufffe\023\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\005\054\ufffe\056\ufffe\061" +
    "\ufffe\062\ufffe\065\ufffe\066\ufffe\067\ufffe\001\002\000\014" +
    "\037\021\040\030\041\036\042\012\043\014\001\002\000" +
    "\004\002\217\001\002\000\056\002\ufffb\015\017\023\016" +
    "\037\021\040\030\041\036\042\012\043\014\044\024\045" +
    "\032\046\033\047\011\050\010\051\034\052\022\054\025" +
    "\056\037\061\020\062\023\065\027\066\031\067\035\001" +
    "\002\000\022\015\017\023\016\044\024\045\032\047\011" +
    "\065\027\066\057\067\035\001\002\000\022\015\017\023" +
    "\016\044\024\045\032\047\011\065\027\066\057\067\035" +
    "\001\002\000\006\020\uffd1\066\uffd1\001\002\000\026\004" +
    "\211\006\065\007\061\010\067\011\063\012\064\013\062" +
    "\014\071\016\070\034\210\001\002\000\004\017\205\001" +
    "\002\000\004\066\175\001\002\000\024\015\017\023\016" +
    "\024\uffd5\044\024\045\032\047\011\065\027\066\057\067" +
    "\035\001\002\000\022\015\017\023\016\044\024\045\032" +
    "\047\011\065\027\066\057\067\035\001\002\000\022\015" +
    "\017\023\016\044\024\045\032\047\011\065\027\066\057" +
    "\067\035\001\002\000\006\020\uffd4\066\uffd4\001\002\000" +
    "\004\023\165\001\002\000\004\025\145\001\002\000\042" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\016\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\036\uffe2\001\002\000\004\025\133\001" +
    "\002\000\004\002\001\001\002\000\042\004\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016" +
    "\uffe5\024\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
    "\036\uffe5\001\002\000\006\020\uffd3\066\uffd3\001\002\000" +
    "\036\004\uffe6\005\130\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\016\uffe6\025\105\027\106\034" +
    "\uffe6\035\107\001\002\000\042\004\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\036\uffe3" +
    "\001\002\000\022\015\017\023\016\044\024\045\032\047" +
    "\011\065\027\066\057\067\035\001\002\000\014\037\021" +
    "\040\030\041\036\042\012\043\014\001\002\000\042\004" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\024\uffe4\026\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\034\uffe4\036\uffe4\001\002\000\006\020\uffd2\066\uffd2" +
    "\001\002\000\004\025\042\001\002\000\060\002\ufffb\015" +
    "\017\023\016\024\ufffb\037\021\040\030\041\036\042\012" +
    "\043\014\044\024\045\032\046\033\047\011\050\010\051" +
    "\034\052\022\054\025\056\037\061\020\062\023\065\027" +
    "\066\031\067\035\001\002\000\006\002\ufffc\024\ufffc\001" +
    "\002\000\014\037\021\040\030\041\036\042\012\043\014" +
    "\001\002\000\004\066\044\001\002\000\004\032\045\001" +
    "\002\000\004\066\046\001\002\000\004\026\047\001\002" +
    "\000\004\023\050\001\002\000\056\015\017\023\016\024" +
    "\ufffb\037\021\040\030\041\036\042\012\043\014\044\024" +
    "\045\032\046\033\047\011\050\010\051\034\052\022\054" +
    "\025\056\037\061\020\062\023\065\027\066\031\067\035" +
    "\001\002\000\004\024\052\001\002\000\064\002\uffec\015" +
    "\uffec\023\uffec\024\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\054\uffec\056\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\001\002\000\004\066" +
    "\054\001\002\000\006\005\056\033\055\001\002\000\022" +
    "\015\017\023\016\044\024\045\032\047\011\065\027\066" +
    "\057\067\035\001\002\000\022\015\017\023\016\044\024" +
    "\045\032\047\011\065\027\066\057\067\035\001\002\000" +
    "\050\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\024\uffe6\025\105\026\uffe6\027" +
    "\106\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\107\036\uffe6" +
    "\001\002\000\024\004\066\006\065\007\061\010\067\011" +
    "\063\012\064\013\062\014\071\016\070\001\002\000\022" +
    "\015\017\023\016\044\024\045\032\047\011\065\027\066" +
    "\057\067\035\001\002\000\022\015\017\023\016\044\024" +
    "\045\032\047\011\065\027\066\057\067\035\001\002\000" +
    "\022\015\017\023\016\044\024\045\032\047\011\065\027" +
    "\066\057\067\035\001\002\000\022\015\017\023\016\044" +
    "\024\045\032\047\011\065\027\066\057\067\035\001\002" +
    "\000\022\015\017\023\016\044\024\045\032\047\011\065" +
    "\027\066\057\067\035\001\002\000\004\023\075\001\002" +
    "\000\022\015\017\023\016\044\024\045\032\047\011\065" +
    "\027\066\057\067\035\001\002\000\022\015\017\023\016" +
    "\044\024\045\032\047\011\065\027\066\057\067\035\001" +
    "\002\000\022\015\017\023\016\044\024\045\032\047\011" +
    "\065\027\066\057\067\035\001\002\000\042\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\062\014\uffe7" +
    "\016\uffe7\024\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\034" +
    "\uffe7\036\uffe7\001\002\000\042\004\uffd8\006\065\007\061" +
    "\010\067\011\063\012\064\013\062\014\071\016\uffd8\024" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\036\uffd8" +
    "\001\002\000\042\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\062\014\071\016\uffdc\024\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\001\002\000" +
    "\056\015\017\023\016\024\ufffb\037\021\040\030\041\036" +
    "\042\012\043\014\044\024\045\032\046\033\047\011\050" +
    "\010\051\034\052\022\054\025\056\037\061\020\062\023" +
    "\065\027\066\031\067\035\001\002\000\004\024\077\001" +
    "\002\000\064\002\ufff0\015\ufff0\023\ufff0\024\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\056\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\001\002\000\042\004\uffea\006\uffea\007\uffea\010\067" +
    "\011\063\012\064\013\062\014\071\016\uffea\024\uffea\026" +
    "\uffea\030\uffea\031\uffea\032\uffea\034\uffea\036\uffea\001\002" +
    "\000\042\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\062\014\071\016\uffda\024\uffda\026\uffda\030\uffda" +
    "\031\uffda\032\uffda\034\uffda\036\uffda\001\002\000\042\004" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\062" +
    "\014\071\016\uffdb\024\uffdb\026\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\036\uffdb\001\002\000\042\004\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\024\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8" +
    "\036\uffe8\001\002\000\042\004\uffe9\006\uffe9\007\uffe9\010" +
    "\067\011\063\012\064\013\062\014\071\016\uffe9\024\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\036\uffe9\001" +
    "\002\000\024\015\017\023\016\026\uffd5\044\024\045\032" +
    "\047\011\065\027\066\057\067\035\001\002\000\022\015" +
    "\017\023\016\044\024\045\032\047\011\065\027\066\057" +
    "\067\035\001\002\000\022\015\017\023\016\044\024\045" +
    "\032\047\011\065\027\066\057\067\035\001\002\000\024" +
    "\006\065\007\061\010\067\011\063\012\064\013\062\014" +
    "\071\016\070\036\111\001\002\000\042\004\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016" +
    "\uffd9\024\uffd9\026\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9" +
    "\036\uffd9\001\002\000\024\006\065\007\061\010\067\011" +
    "\063\012\064\013\062\014\071\016\070\030\113\001\002" +
    "\000\042\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\016\uffdd\024\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\036\uffdd\001\002\000\004\026" +
    "\120\001\002\000\030\006\065\007\061\010\067\011\063" +
    "\012\064\013\062\014\071\016\070\024\uffd6\026\uffd6\031" +
    "\116\001\002\000\026\015\017\023\016\024\uffd5\026\uffd5" +
    "\044\024\045\032\047\011\065\027\066\057\067\035\001" +
    "\002\000\006\024\uffd7\026\uffd7\001\002\000\042\004\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\016\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\036\uffdf\001\002\000\024\004\122\006\065\007" +
    "\061\010\067\011\063\012\064\013\062\014\071\016\070" +
    "\001\002\000\004\023\123\001\002\000\056\015\017\023" +
    "\016\024\ufffb\037\021\040\030\041\036\042\012\043\014" +
    "\044\024\045\032\046\033\047\011\050\010\051\034\052" +
    "\022\054\025\056\037\061\020\062\023\065\027\066\031" +
    "\067\035\001\002\000\004\024\125\001\002\000\064\002" +
    "\ufff1\015\ufff1\023\ufff1\024\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\054\ufff1\056\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001\002\000" +
    "\024\004\127\006\065\007\061\010\067\011\063\012\064" +
    "\013\062\014\071\016\070\001\002\000\064\002\ufff9\015" +
    "\ufff9\023\ufff9\024\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\054\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\067\ufff9\001\002\000\022\015" +
    "\017\023\016\044\024\045\032\047\011\065\027\066\057" +
    "\067\035\001\002\000\024\004\132\006\065\007\061\010" +
    "\067\011\063\012\064\013\062\014\071\016\070\001\002" +
    "\000\064\002\ufff8\015\ufff8\023\ufff8\024\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\056\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8" +
    "\001\002\000\022\015\017\023\016\044\024\045\032\047" +
    "\011\065\027\066\057\067\035\001\002\000\024\006\065" +
    "\007\061\010\067\011\063\012\064\013\062\014\071\016" +
    "\070\026\135\001\002\000\004\023\136\001\002\000\056" +
    "\015\017\023\016\024\ufffb\037\021\040\030\041\036\042" +
    "\012\043\014\044\024\045\032\046\033\047\011\050\010" +
    "\051\034\052\022\054\025\056\037\061\020\062\023\065" +
    "\027\066\031\067\035\001\002\000\004\024\140\001\002" +
    "\000\066\002\uffee\015\uffee\023\uffee\024\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\054\uffee\055\141\056" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\001\002\000\004\023\142\001\002\000\056\015" +
    "\017\023\016\024\ufffb\037\021\040\030\041\036\042\012" +
    "\043\014\044\024\045\032\046\033\047\011\050\010\051" +
    "\034\052\022\054\025\056\037\061\020\062\023\065\027" +
    "\066\031\067\035\001\002\000\004\024\144\001\002\000" +
    "\064\002\uffed\015\uffed\023\uffed\024\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\054\uffed\056\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001" +
    "\002\000\022\015\017\023\016\044\024\045\032\047\011" +
    "\065\027\066\057\067\035\001\002\000\024\006\065\007" +
    "\061\010\067\011\063\012\064\013\062\014\071\016\070" +
    "\026\147\001\002\000\004\023\150\001\002\000\006\063" +
    "\153\064\uffc8\001\002\000\004\064\160\001\002\000\006" +
    "\063\153\064\uffc8\001\002\000\022\015\017\023\016\044" +
    "\024\045\032\047\011\065\027\066\057\067\035\001\002" +
    "\000\024\006\065\007\061\010\067\011\063\012\064\013" +
    "\062\014\071\016\070\032\155\001\002\000\054\015\017" +
    "\023\016\037\021\040\030\041\036\042\012\043\014\044" +
    "\024\045\032\046\033\047\011\050\010\051\034\052\022" +
    "\054\025\056\037\061\020\062\023\065\027\066\031\067" +
    "\035\001\002\000\006\063\uffcb\064\uffcb\001\002\000\004" +
    "\064\uffc9\001\002\000\004\032\163\001\002\000\004\024" +
    "\162\001\002\000\064\002\uffeb\015\uffeb\023\uffeb\024\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\001\002\000\054\015\017\023\016\037\021" +
    "\040\030\041\036\042\012\043\014\044\024\045\032\046" +
    "\033\047\011\050\010\051\034\052\022\054\025\056\037" +
    "\061\020\062\023\065\027\066\031\067\035\001\002\000" +
    "\004\024\uffca\001\002\000\056\015\017\023\016\024\ufffb" +
    "\037\021\040\030\041\036\042\012\043\014\044\024\045" +
    "\032\046\033\047\011\050\010\051\034\052\022\054\025" +
    "\056\037\061\020\062\023\065\027\066\031\067\035\001" +
    "\002\000\004\024\167\001\002\000\064\002\ufff5\015\ufff5" +
    "\023\ufff5\024\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\054\ufff5\056\ufff5\061\ufff5\062\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\001\002\000\024\004\171" +
    "\006\065\007\061\010\067\011\063\012\064\013\062\014" +
    "\071\016\070\001\002\000\064\002\ufff2\015\ufff2\023\ufff2" +
    "\024\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\054\ufff2\056\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\001\002\000\042\004\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\016" +
    "\uffe1\024\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1" +
    "\036\uffe1\001\002\000\004\024\174\001\002\000\042\004" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\036\uffe0\001\002\000\010\004\176\005\177" +
    "\033\200\001\002\000\064\002\ufff6\015\ufff6\023\ufff6\024" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\054" +
    "\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\001\002\000\022\015\017\023\016\044" +
    "\024\045\032\047\011\065\027\066\057\067\035\001\002" +
    "\000\022\015\017\023\016\044\024\045\032\047\011\065" +
    "\027\066\057\067\035\001\002\000\024\004\202\006\065" +
    "\007\061\010\067\011\063\012\064\013\062\014\071\016" +
    "\070\001\002\000\064\002\ufff4\015\ufff4\023\ufff4\024\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4" +
    "\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\001\002\000\024\004\204\006\065\007\061" +
    "\010\067\011\063\012\064\013\062\014\071\016\070\001" +
    "\002\000\064\002\ufff7\015\ufff7\023\ufff7\024\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\056\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\001\002\000\014\037\021\040\030\041\036\042\012" +
    "\043\014\001\002\000\004\020\207\001\002\000\006\020" +
    "\uffd0\066\uffd0\001\002\000\022\015\017\023\016\044\024" +
    "\045\032\047\011\065\027\066\057\067\035\001\002\000" +
    "\064\002\ufffa\015\ufffa\023\ufffa\024\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\056\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001" +
    "\002\000\024\004\213\006\065\007\061\010\067\011\063" +
    "\012\064\013\062\014\071\016\070\001\002\000\064\002" +
    "\uffef\015\uffef\023\uffef\024\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\054\uffef\056\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\001\002\000" +
    "\042\004\uffde\006\065\007\061\010\067\011\063\012\064" +
    "\013\062\014\071\016\070\024\uffde\026\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\036\uffde\001\002\000\024\004\216" +
    "\006\065\007\061\010\067\011\063\012\064\013\062\014" +
    "\071\016\070\001\002\000\064\002\ufff3\015\ufff3\023\ufff3" +
    "\024\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\054\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\001\002\000\004\002\000\001\002" +
    "\000\004\066\221\001\002\000\004\025\222\001\002\000" +
    "\016\026\uffcc\037\021\040\030\041\036\042\012\043\014" +
    "\001\002\000\004\066\234\001\002\000\004\026\230\001" +
    "\002\000\006\026\uffcd\031\226\001\002\000\016\026\uffcc" +
    "\037\021\040\030\041\036\042\012\043\014\001\002\000" +
    "\004\026\uffce\001\002\000\004\023\231\001\002\000\056" +
    "\015\017\023\016\024\ufffb\037\021\040\030\041\036\042" +
    "\012\043\014\044\024\045\032\046\033\047\011\050\010" +
    "\051\034\052\022\054\025\056\037\061\020\062\023\065" +
    "\027\066\031\067\035\001\002\000\004\024\233\001\002" +
    "\000\060\002\uffff\015\uffff\023\uffff\037\uffff\040\uffff\041" +
    "\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\056\uffff\061" +
    "\uffff\062\uffff\065\uffff\066\uffff\067\uffff\001\002\000\006" +
    "\026\uffcf\031\uffcf\001\002\000\056\002\ufffd\015\ufffd\023" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\054" +
    "\ufffd\056\ufffd\061\ufffd\062\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\002\005\003\006\012\003\001\001\000" +
    "\006\003\234\012\003\001\001\000\004\007\217\001\001" +
    "\000\002\001\001\000\012\004\025\005\037\006\012\007" +
    "\014\001\001\000\004\006\214\001\001\000\004\006\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\114\010\172\001\001" +
    "\000\004\006\171\001\001\000\004\006\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\125\001\001\000\004\007\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\040\005\037\006\012\007\014\001\001\000\002\001" +
    "\001\000\004\007\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\050\005\037\006\012\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\120\001\001\000\004\006\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\103\001\001\000\004\006\102\001\001\000\004\006\101" +
    "\001\001\000\004\006\100\001\001\000\004\006\077\001" +
    "\001\000\002\001\001\000\004\006\073\001\001\000\004" +
    "\006\072\001\001\000\004\006\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\075" +
    "\005\037\006\012\007\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\114\010\113\001\001\000\004\006\111\001\001\000\004" +
    "\006\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\114\010\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\123\005\037\006\012\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\136\005\037\006\012\007" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\142\005\037\006\012\007\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\150\017\151\001\001\000\004\016\160\001\001\000\006" +
    "\015\156\017\151\001\001\000\004\006\153\001\001\000" +
    "\002\001\001\000\010\005\155\006\012\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\163\006\012" +
    "\007\014\001\001\000\002\001\001\000\012\004\165\005" +
    "\037\006\012\007\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\202\001\001\000\004\006" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\222\013\224\014\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\222\013\224\014" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\231\005\037\006\012\007\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol lastToken) {
    System.err.println("Syntax error at  " +
                       "Line: " + lastToken.left + "   " +
                       "Column: " + lastToken.right);
}

public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    done_parsing();
    System.exit(1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_list stmt_list 
            {
              ProgramNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionListNode f = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Program parsed!");
        RESULT = new ProgramNode(f, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funkyboi ::= FUNC type ИД OPENPAREN pl CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              FunkNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParamListNode p = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
         System.err.println("Funk parsed!");
	RESULT = new FunkNode(t,и,p,s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funkyboi",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_list ::= 
            {
              FunctionListNode RESULT =null;
		
        System.err.println("Function list parsed!");
        RESULT = new FunctionListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // func_list ::= funkyboi func_list 
            {
              FunctionListNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunkNode f = (FunkNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionListNode f2 = (FunctionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	f2.addFunk(f,0);
	RESULT=f2;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt stmt_list 
            {
              StatementListNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementListNode l = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement list parsed!");
        /* Add statement at position 0; it should be at the *front* of the list */
        l.addStatement(s, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_list ::= 
            {
              StatementListNode RESULT =null;
		
        System.err.println("Empty statement list parsed!");
        RESULT = new StatementListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as expression!");
        RESULT = new ExpressionStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= PRINT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as print!");
        RESULT = new PrintStatementNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= ИД ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as assignment!");
        RESULT = new AssignStatementNode(и, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= type ИД ASSIGN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration assignment!");
        AssignStatementNode assignment = new AssignStatementNode(и, e);
        RESULT = new DeclarationStatementNode(t, и, assignment);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= type ИД SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration!");
        RESULT = new DeclarationStatementNode(t, и);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= ERROR OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as an error statement!");
        RESULT = new ErrorStatementNode(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= type ИД READFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a declaration read!");
        ReadStatementNode assignment = new ReadStatementNode(и, e);
        RESULT = new DeclarationStatementNode(t, и, assignment);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= EXIT expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as Exit!");
        RESULT = new ExitStatementNode(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= RETURN expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as Return!");
        RESULT = new ReturnStatementNode(e);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= UNTIL type ИД READFILE expr SEMICOLON OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as until!");
        ReadStatementNode assignment = new ReadStatementNode(и, e);
        DeclarationStatementNode ds = new DeclarationStatementNode(t, и, assignment);
	RESULT = new UntilStatementNode(ds, s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= UNTIL type ИД ASSIGN expr SEMICOLON OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as until!");
        AssignStatementNode assignment = new AssignStatementNode(и, e);
        DeclarationStatementNode ds = new DeclarationStatementNode(t, и, assignment);
	RESULT = new UntilStatementNode(ds, s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= expr WRITEFILE expr SEMICOLON 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as a File write!");
        RESULT = new FileWriteNode(e,e2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= IF OPENPAREN expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as if!");
        RESULT = new IfStateNode(e,s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= IF OPENPAREN expr CLOSEPAREN OPENCURLY stmt_list CLOSECURLY ELSE OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s2 = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as if!");
        RESULT = new IfStateNode(e,s,s2);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= FOR OPENPAREN type ИД COLON ИД CLOSEPAREN OPENCURLY stmt_list CLOSECURLY 
            {
              StatementNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int и2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int и2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String и2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementListNode s = (StatementListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as for!");
        RESULT = new ForStateNode(t, и, new IdExpressionNode(и2), s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= SWITCH OPENPAREN expr CLOSEPAREN OPENCURLY cl dc CLOSECURLY 
            {
              StatementNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		CaseListNode cas = (CaseListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DefaultCaseNode d = (DefaultCaseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Statement parsed as switch!");
	cas.addDefault(d);
        RESULT = new CaseStateNode(e, cas);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr PLUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as plus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "+");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as minus!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "-");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr AND expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as and!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "&&");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr ИЛИ expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as ил!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "||");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ИД 
            {
              ExpressionNode RESULT =null;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as ИД!");
        RESULT = new IdExpressionNode(и);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NUM 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as NUM!");
        RESULT = new NumExpressionNode(n);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= QSTRING 
            {
              ExpressionNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as QSTRING!");
        RESULT = new StringExpressionNode(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= FALSE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as FALSE!");
        RESULT = new BoolExpressionNode(false);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= TRUE 
            {
              ExpressionNode RESULT =null;
		
        System.err.println("Expression parsed as TRUE!");
        RESULT = new BoolExpressionNode(true);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NOT expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as NOT!");
        RESULT = new NotExpressionNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= OPENCURLY expr_list CLOSECURLY 
            {
              ExpressionNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionListNode el = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as list!");
        RESULT = el;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= ИД OPENPAREN expr_list CLOSEPAREN 
            {
              ExpressionNode RESULT =null;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionListNode el = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as Funk Kall!");
        RESULT = new FunkKallNode(и,el);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= INPUT expr 
            {
              ExpressionNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as input!");
        RESULT = new InputExpNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= ИД OPENSQBRACE expr CLOSESQBRACE 
            {
              ExpressionNode RESULT =null;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as list access!");
        RESULT = new ListAcNode(и, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr TIMES expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as times!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "*");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr DIVIDE expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as divide!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "/");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MOD expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as mod!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "%");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= ИД OPENFILTER expr CLOSEFILTER 
            {
              ExpressionNode RESULT =null;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Expression parsed as list filter!");
        RESULT = new ListFiltNode(и,e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr EQUALS expr 
            {
              ExpressionNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e1 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e2 = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed as mod!");
        RESULT = new BinaryOpExpressionNode(e1, e2, "==");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_list ::= expr COMMA expr_list 
            {
              ExpressionListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionListNode el = (ExpressionListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Statement list parsed!");
        el.addExpression(e, 0);
        RESULT = el;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_list ::= expr 
            {
              ExpressionListNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Expression parsed!");
        RESULT = new ExpressionListNode(e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_list ::= 
            {
              ExpressionListNode RESULT =null;
		
        System.err.println("Expression parsed!");
        RESULT = new ExpressionListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= NUMTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as NUM!");
        RESULT = new TypeNode("num");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= TEXTTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as TEXT!");
        RESULT = new TypeNode("text");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= BOOLTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as BOOL!");
        RESULT = new TypeNode("bool");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type ::= VOIDTYPE 
            {
              TypeNode RESULT =null;
		
        System.err.println("Type parsed as VOID!");
        RESULT = new TypeNode("void");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= LISTTYPE LT type GT 
            {
              TypeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.err.println("Type parsed as LIST!");
        RESULT = new ListTypeNode(t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // p ::= type ИД 
            {
              ParamNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int иleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int иright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String и = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	System.err.println("Parameter parsed!");
	RESULT= new ParamNode(t,и);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pl ::= p COMMA pl 
            {
              ParamListNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParamNode pa = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamListNode l = (ParamListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Parameter list parsed!");
        l.addParam(pa, 0);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pl ::= p 
            {
              ParamListNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParamNode pa = (ParamNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Parameter parsed!");
        RESULT = new ParamListNode(pa);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pl ::= 
            {
              ParamListNode RESULT =null;
		
        System.err.println("Expression parsed!");
        RESULT = new ParamListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // case ::= CASE expr COLON stmt 
            {
              CaseNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Case parsed!");
        RESULT = new CaseNode(e,s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dc ::= DEFAULT COLON stmt 
            {
              DefaultCaseNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementNode s = (StatementNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.err.println("Default Case parsed!");
        RESULT = new DefaultCaseNode(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dc",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cl ::= case cl 
            {
              CaseListNode RESULT =null;
		int casleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseNode cas = (CaseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseListNode lis = (CaseListNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	lis.addCase(cas,0);
	System.err.println("Case added");
	RESULT=lis;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cl ::= 
            {
              CaseListNode RESULT =null;
		
        System.err.println("case list parsed!");
        RESULT = new CaseListNode();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
